What happens when you initialize a repository? Why do you need to do it?
------------------------------------------------------------------------
I see a message saying, an empty git repository has been initiialized. And from what I see in
the video, a hidden .git folder is created after I do "git init". I think I will need it to
start tracking files. I can't start tracking files without initializing git repository. It
contains all metadata and history about my files. git init creates an empty skeleton for that. 

How is the staging area different from the working directory and the repository? What value do
you think it offers?
----------------------------------------------------------------------------
Directory is the actual directory with files in it. It's the content. Repository is my directory
plus its history and extra meta data about the directory file contents. Staging area on the
other hand acts as an intermediary. It's not exactly directory nor is it a repository. It's what
the name implies, a staging area. It's like the place where you first add the files and then
commit into git. It's a stage before I change the state of git repository (as in the data about
changes) since my working files have already changed but the data about where and how the files
have changed hasn't been recorded yet. 
      One good thing about staging area that I can think of is, I can add only the files I want
and other files would be unchanged in the new snapshot except the file I commited which would be
different. Moreover, it can act as a comfirmation dialogue before I actually commit something to
make sure about what I am actually committing, so that I don't actually commit what I don't want
to. It acts like a buffer.

How can you use the staging area to make sure you have one commit per logical
change?

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
